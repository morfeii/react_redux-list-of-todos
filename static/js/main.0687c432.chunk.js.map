{"version":3,"sources":["store/actionTypes.ts","store/rootReducer.ts","store/store.ts","utils/constants.js","api/getData.ts","api/todosApi.ts","api/usersApi.ts","components/TodoItem.tsx","components/TodoList.tsx","App.tsx","store/actionCreators.ts","index.tsx"],"names":["ActionTypes","getTodos","state","todos","getIsLoading","isLoading","getIsLoaded","isLoaded","getSortfield","sortField","initialState","store","createStore","action","undefined","type","SetTodos","payload","SetLoading","SetLoaded","SetSortField","DeleteTodo","newTodos","filter","todo","id","composeWithDevTools","API_URL","getData","url","a","fetch","response","json","data","getTodosFromServer","getUsersFromServer","TodoItem","deleteTodo","title","completed","user","className","name","onClick","TodoList","sortTodos","map","key","mapDispatchToProps","setTodos","setLoading","setLoaded","setSortField","sortBy","connect","loadTodos","Promise","all","loadedTodos","loadedUsers","preparedTodos","find","person","userId","reverse","sort","b","localeCompare","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0687c432.chunk.js","sourcesContent":["import { Action as ReduxAction } from 'redux';\nimport { PreparedTodoType } from '../utils/interfaces';\n\nexport enum ActionTypes {\n  SetTodos = 'setTodos',\n  SetLoading = 'setLoading',\n  SetLoaded = 'setLoaded',\n  SetSortField = 'setSortField',\n  DeleteTodo = 'setDeleteTodo',\n}\n\nexport interface Action<T extends ActionTypes = ActionTypes, P = null> extends ReduxAction<T> {\n  payload: P;\n}\n\nexport type SetTodosAction = Action<ActionTypes.SetTodos, PreparedTodoType[]>;\nexport type SetLoadingAction = Action<ActionTypes.SetLoading, boolean>;\nexport type SetLoadedAction = Action<ActionTypes.SetLoaded, boolean>;\nexport type SetSortFieldAction = Action<ActionTypes.SetSortField, string>;\nexport type DeleteTodoAction = Action<ActionTypes.DeleteTodo, number>;\n\nexport type Actions = SetTodosAction\n| SetLoadingAction\n| SetLoadedAction\n| SetSortFieldAction\n| DeleteTodoAction;\n","import { Reducer } from 'redux';\nimport { Actions, ActionTypes } from './actionTypes';\nimport { RootState } from '../utils/interfaces';\n\n\nexport const getTodos = (state: RootState) => state.todos;\nexport const getIsLoading = (state: RootState) => state.isLoading;\nexport const getIsLoaded = (state: RootState) => state.isLoaded;\nexport const getSortfield = (state: RootState) => state.sortField;\n\n\nexport const initialState: RootState = {\n  todos: [],\n  isLoading: false,\n  isLoaded: false,\n  sortField: '',\n};\n\nexport const rootReducer: Reducer<RootState, Actions> = (state, action) => {\n  if (state === undefined) {\n    return { ...initialState };\n  }\n\n  switch (action.type) {\n    case ActionTypes.SetTodos:\n      return {\n        ...state,\n        todos: action.payload,\n      };\n    case ActionTypes.SetLoading:\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n    case ActionTypes.SetLoaded:\n      return {\n        ...state,\n        isLoaded: action.payload,\n      };\n    case ActionTypes.SetSortField:\n      return {\n        ...state,\n        sortField: action.payload,\n      };\n\n    case ActionTypes.DeleteTodo: {\n      const newTodos = state.todos.filter(todo => todo.id !== action.payload);\n\n      return {\n        ...state,\n        todos: newTodos,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n","import { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { initialState, rootReducer } from './rootReducer';\n\nexport const store = createStore(rootReducer, initialState, composeWithDevTools());\n","export const API_URL = 'https://jsonplaceholder.typicode.com';\n","export const getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n  const data = await response.json();\n\n  return data;\n};\n","import { API_URL } from '../utils/constants';\nimport { TodoType } from '../utils/interfaces';\nimport { getData } from './getData';\n\n\nexport const getTodosFromServer = async (): Promise<TodoType[]> => {\n  return getData<TodoType[]>(`${API_URL}/todos`);\n};\n","import { API_URL } from '../utils/constants';\nimport { UserType } from '../utils/interfaces';\nimport { getData } from './getData';\n\nexport const getUsersFromServer = async (): Promise<UserType[]> => {\n  return getData<UserType[]>(`${API_URL}/users`);\n};\n","import React, { FC } from 'react';\nimport { PreparedTodoType } from '../utils/interfaces';\n\n\ninterface Props {\n  todo: PreparedTodoType;\n  deleteTodo: (value: number) => void;\n}\n\nexport const TodoItem: FC<Props> = ({ todo, deleteTodo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  //  const onDelete = useCallback(() => deleteTodo(id), [todo, id]);\n\n  const onDelete = () => deleteTodo(id);\n\n  return (\n    <tr className=\"table__row\">\n      <td className=\"table__cell\">{id}</td>\n      <td className=\"table__cell\">{user.name}</td>\n      <td className=\"table__cell\">{title}</td>\n      <td className=\"table__cell\">{completed ? 'Yes' : 'No'}</td>\n      <td className=\"table__cell\">\n        <button\n          type=\"button\"\n          onClick={onDelete}\n        >\n          Delete\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React, { FC } from 'react';\nimport { TodoItem } from './TodoItem';\nimport { PreparedTodoType } from '../utils/interfaces';\n\ninterface Props {\n  todos: PreparedTodoType[];\n  sortTodos: (sortBy: string) => void;\n  deleteTodo: (value: number) => void;\n}\n\nexport const TodoList: FC<Props> = ({ todos, sortTodos, deleteTodo }) => (\n  <table className=\"table\">\n    <thead className=\"table__head\">\n      <tr className=\"table__row\">\n        <th className=\"table__heading\" onClick={() => sortTodos('id')}>\n          No\n        </th>\n        <th className=\"table__heading\" onClick={() => sortTodos('username')}>\n          Name\n        </th>\n        <th className=\"table__heading\" onClick={() => sortTodos('title')}>\n          Title\n        </th>\n        <th className=\"table__heading\" onClick={() => sortTodos('completed')}>\n          Status\n        </th>\n        <th className=\"table__heading\">\n          Delete\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      {todos.map(todo => <TodoItem key={todo.id} todo={todo} deleteTodo={deleteTodo} />)}\n    </tbody>\n  </table>\n);\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\n\nimport { getTodosFromServer } from './api/todosApi';\nimport { getUsersFromServer } from './api/usersApi';\n\nimport {\n  getTodos,\n  getIsLoading,\n  getIsLoaded,\n  getSortfield,\n} from './store/rootReducer';\n\nimport {\n  setTodosAction,\n  setLoadingAction,\n  setLoadedAction,\n  setSortFieldAction,\n  deleteTodoAction,\n} from './store/actionCreators';\n\nimport { TodoList } from './components/TodoList';\nimport { RootState, PreparedTodoType, UserType } from './utils/interfaces';\n\ninterface Props {\n  todos: PreparedTodoType[];\n  setTodos: (value: PreparedTodoType[]) => void;\n  isLoading: boolean;\n  setLoading: (value: boolean) => void;\n  isLoaded: boolean;\n  setLoaded: (value: boolean) => void;\n  sortField: string;\n  setSortField: (value: string) => void;\n  deleteTodo: (value: number) => void;\n}\n\nconst App: FC<Props> = ({\n  todos,\n  setTodos,\n  isLoading,\n  setLoading,\n  isLoaded,\n  setLoaded,\n  sortField,\n  setSortField,\n  deleteTodo,\n}) => {\n  const loadTodos = async () => {\n    setLoading(true);\n\n    const [loadedTodos, loadedUsers] = await Promise.all([\n      getTodosFromServer(),\n      getUsersFromServer(),\n    ]);\n\n    const preparedTodos = [...loadedTodos]\n      .map((todo) => {\n        const user = loadedUsers.find(person => person.id === todo.userId) as UserType;\n\n        return {\n          ...todo,\n          user,\n        };\n      });\n\n    setTodos(preparedTodos);\n    setLoaded(true);\n    setLoading(false);\n  };\n\n  const sortTodos = (sortBy: string) => {\n    if (sortBy === sortField) {\n      setTodos([...todos].reverse());\n    } else {\n      switch (sortBy) {\n        case 'id': setTodos([...todos]\n          .sort((a, b) => b.id - a.id));\n          break;\n        case 'completed': setTodos([...todos]\n          .sort(a => (a.completed ? -1 : 1)));\n          break;\n        case 'username': setTodos([...todos]\n          .sort((a, b) => (b.user.name.localeCompare(a.user.name))));\n          break;\n        default: setTodos([...todos]\n          .sort((a, b) => b.title.localeCompare(a.title)));\n      }\n\n      setSortField(sortBy);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {!isLoaded\n        ? (\n          <button\n            type=\"button\"\n            className=\"button\"\n            disabled={isLoading}\n            onClick={loadTodos}\n          >\n            {isLoading ? (<>Loading...</>) : (<>Load Todos</>)}\n          </button>\n        )\n        : (\n          <TodoList todos={todos} sortTodos={sortTodos} deleteTodo={deleteTodo} />\n        )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  todos: getTodos(state),\n  isLoading: getIsLoading(state),\n  isLoaded: getIsLoaded(state),\n  sortField: getSortfield(state),\n});\n\nconst mapDispatchToProps = {\n  setTodos: setTodosAction,\n  setLoading: setLoadingAction,\n  setLoaded: setLoadedAction,\n  setSortField: setSortFieldAction,\n  deleteTodo: deleteTodoAction,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { PreparedTodoType } from '../utils/interfaces';\nimport {\n  SetTodosAction,\n  SetLoadingAction,\n  SetLoadedAction,\n  SetSortFieldAction,\n  DeleteTodoAction,\n  ActionTypes,\n} from './actionTypes';\n\nexport const setTodosAction = (todos: PreparedTodoType[]): SetTodosAction => ({\n  type: ActionTypes.SetTodos,\n  payload: todos,\n});\n\nexport const setLoadingAction = (isLoading: boolean): SetLoadingAction => ({\n  type: ActionTypes.SetLoading,\n  payload: isLoading,\n});\n\nexport const setLoadedAction = (isLoaded: boolean): SetLoadedAction => ({\n  type: ActionTypes.SetLoaded,\n  payload: isLoaded,\n});\n\nexport const setSortFieldAction = (sortBy: string): SetSortFieldAction => ({\n  type: ActionTypes.SetSortField,\n  payload: sortBy,\n});\n\nexport const deleteTodoAction = (id: number): DeleteTodoAction => ({\n  type: ActionTypes.DeleteTodo,\n  payload: id,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}